# =====================================================
# Production Docker Compose Configuration
# =====================================================
# For AWS deployment - includes database and Redis services

networks:
  production-network:
    driver: bridge

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: gyvagaudziaispastai-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: gyvagaudziaispastai-redis-prod
    volumes:
      - redis-data:/data
    networks:
      - production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Medusa Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: gyvagaudziaispastai-backend-prod
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    command: ["sh", "-c", "NODE_OPTIONS='--max-old-space-size=3072' npx medusa build && cd .medusa/server && npm ci --omit=dev && NODE_OPTIONS='--max-old-space-size=1536' npx medusa db:migrate && npx medusa start"]
    ports:
      - "9000:9000"
    volumes:
      # Static files volume - writable for uploads
      - static-files:/server/static
    networks:
      - production-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Next.js Storefront Service
  storefront:
    build:
      context: ./storefront
      dockerfile: Dockerfile.production
    container_name: gyvagaudziaispastai-storefront-prod
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - MEDUSA_BACKEND_URL=http://backend:9000
    command: ["npm", "run", "start"]
    ports:
      - "3000:3000"
    networks:
      - production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health", "||", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    container_name: gyvagaudziaispastai-nginx-prod
    depends_on:
      - backend
      - storefront
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static-files:/var/www/static:ro
    networks:
      - production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  static-files:
    driver: local