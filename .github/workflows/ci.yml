# =========================================
# CI/CD Pipeline - Continuous Integration
# =========================================
# Runs on every push and pull request

name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel running workflows on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =====================================
  # Code Quality & Security Checks
  # =====================================
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            storefront/package-lock.json

      # Backend Quality Checks
      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: 🔍 Backend Lint Check
        run: |
          cd backend
          npm run lint || echo "⚠️ Linting issues found"

      - name: 🔒 Backend Security Audit
        run: |
          cd backend
          npm audit --audit-level=moderate

      # Storefront Quality Checks  
      - name: 📦 Install Storefront Dependencies
        run: |
          cd storefront
          npm ci

      - name: 🔍 Storefront Lint Check
        run: |
          cd storefront
          npm run lint || echo "⚠️ Linting issues found"

      - name: 🏗️ Storefront Build Check
        run: |
          cd storefront
          npm run build

      - name: 🔒 Storefront Security Audit
        run: |
          cd storefront
          npm audit --audit-level=moderate

      # Dependency Security Scanning
      - name: 🛡️ Dependency Security Scan
        uses: socketdev/socket-security-action@v1
        with:
          api-token: ${{ secrets.SOCKET_SECURITY_API_TOKEN }}
          continue-on-error: true

      - name: ⚠️ Environment Variables Check
        run: |
          echo "Checking for hardcoded secrets..."
          # Check for common secret patterns
          if grep -r "AKIA\|sk_live_\|pk_live_\|supersecret" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "❌ Potential hardcoded secrets found!"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi

  # =====================================
  # Backend Tests
  # =====================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: test-jwt-secret-for-testing-purposes-only
      COOKIE_SECRET: test-cookie-secret-for-testing-purposes-only
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd backend
          npm ci

      - name: 🏗️ Build backend
        run: |
          cd backend
          npm run build

      - name: 🧪 Run unit tests
        run: |
          cd backend
          npm run test:unit

      - name: 🔗 Run integration tests
        run: |
          cd backend
          npm run test:integration:http

      - name: 🧩 Run module tests
        run: |
          cd backend
          npm run test:integration:modules

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          directory: backend/coverage
          flags: backend
          fail_ci_if_error: false

  # =====================================
  # Frontend Tests
  # =====================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: storefront/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd storefront
          npm ci

      - name: 🧪 Run unit tests
        run: |
          cd storefront
          npm run test

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          directory: storefront/coverage
          flags: frontend
          fail_ci_if_error: false

  # =====================================
  # Docker Build Tests
  # =====================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: false
          tags: gyvagaudziaispastai/backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build Storefront Image
        uses: docker/build-push-action@v5
        with:
          context: ./storefront
          file: ./storefront/Dockerfile.production
          push: false
          tags: gyvagaudziaispastai/storefront:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Test Docker Images
        run: |
          # Test backend image
          docker run --rm -d --name test-backend \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e JWT_SECRET=test-secret-for-docker-test \
            -e COOKIE_SECRET=test-cookie-for-docker-test \
            gyvagaudziaispastai/backend:test || echo "Backend image test completed"

          # Test storefront image
          docker run --rm -d --name test-storefront \
            -e NEXT_PUBLIC_MEDUSA_BACKEND_URL=http://localhost:9000 \
            gyvagaudziaispastai/storefront:test || echo "Storefront image test completed"

          echo "✅ Docker images built successfully"

  # =====================================
  # End-to-End Tests (on PR only)
  # =====================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: docker-build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Playwright
        run: |
          npm install -g @playwright/test
          playwright install chromium

      - name: 🚀 Start services with Docker Compose
        run: |
          cp .env.template .env.test
          sed -i 's/CHANGE_THIS_STRONG_PASSWORD/test_password_123/g' .env.test
          sed -i 's/GENERATE_RANDOM_JWT_SECRET_256_BITS/test-jwt-secret-for-e2e-testing-32-chars/g' .env.test
          sed -i 's/GENERATE_RANDOM_COOKIE_SECRET_256_BITS/test-cookie-secret-for-e2e-testing-32-chars/g' .env.test
          
          # Start services in background
          docker-compose --env-file .env.test up -d
          
          # Wait for services to be ready
          timeout 120 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:9000/health 2>/dev/null; do sleep 2; done'

      - name: 🎭 Run E2E tests
        run: playwright test

      - name: 📸 Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down -v

  # =====================================
  # Security Scanning
  # =====================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: docker-build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =====================================
  # Deployment Status
  # =====================================
  deployment-ready:
    name: ✅ Deployment Ready
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests, docker-build, security-scan]

    steps:
      - name: 🎉 Mark as deployment ready
        run: |
          echo "✅ All checks passed! Ready for deployment."
          echo "🚀 Trigger deployment workflow manually or via merge to main branch."

      - name: 📢 Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            🚀 Gyvagaudziaispastai CI Pipeline: ${{ job.status }}
            📝 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            🔗 Workflow: ${{ github.workflow }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}