# =========================================
# Security Scanning Workflow
# =========================================
# Weekly security scans and vulnerability checks

name: 🛡️ Security Scanning

on:
  schedule:
    # Run weekly on Sundays at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'backend/package*.json'
      - 'storefront/package*.json'
      - 'docker-compose*.yml'
      - '**/Dockerfile*'

env:
  NODE_VERSION: '20'

jobs:
  # =====================================
  # Dependency Vulnerability Scanning
  # =====================================
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Backend dependency audit
        run: |
          cd backend
          echo "🔍 Scanning backend dependencies..."
          npm audit --audit-level=moderate --json > ../backend-audit.json || echo "Vulnerabilities found"
          npm audit --audit-level=moderate

      - name: 🔍 Storefront dependency audit
        run: |
          cd storefront
          echo "🔍 Scanning storefront dependencies..."
          npm audit --audit-level=moderate --json > ../storefront-audit.json || echo "Vulnerabilities found"
          npm audit --audit-level=moderate

      - name: 🛡️ Socket Security scan
        uses: socketdev/socket-security-action@v1
        with:
          api-token: ${{ secrets.SOCKET_SECURITY_API_TOKEN }}
          continue-on-error: true

      - name: 📊 Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-reports
          path: |
            backend-audit.json
            storefront-audit.json
          retention-days: 30

  # =====================================
  # Container Security Scanning
  # =====================================
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          tags: gyvagaudziaispastai/backend:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build storefront image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./storefront
          file: ./storefront/Dockerfile.production
          tags: gyvagaudziaispastai/storefront:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Scan backend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gyvagaudziaispastai/backend:security-scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: 🔍 Scan storefront image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gyvagaudziaispastai/storefront:security-scan'
          format: 'sarif'
          output: 'storefront-trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'

      - name: 🔍 Detailed vulnerability report
        run: |
          echo "🔍 Generating detailed vulnerability reports..."
          
          # Backend vulnerabilities
          echo "## Backend Container Vulnerabilities" > security-report.md
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/output aquasec/trivy image \
            --format table --output /output/backend-vulnerabilities.txt \
            gyvagaudziaispastai/backend:security-scan || echo "Scan completed with findings"
          
          # Storefront vulnerabilities  
          echo "## Storefront Container Vulnerabilities" >> security-report.md
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/output aquasec/trivy image \
            --format table --output /output/storefront-vulnerabilities.txt \
            gyvagaudziaispastai/storefront:security-scan || echo "Scan completed with findings"

      - name: 📊 Upload detailed reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            *-trivy-results.sarif
            *-vulnerabilities.txt
            security-report.md
          retention-days: 30

  # =====================================
  # Code Security Analysis
  # =====================================
  code-security:
    name: 🔐 Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: 🔍 Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔍 Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
          generateSarif: true

      - name: 📊 Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # =====================================
  # Infrastructure Security Check
  # =====================================
  infrastructure-security:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Docker Compose security scan
        run: |
          echo "🔍 Analyzing Docker Compose configurations..."
          
          # Check for insecure configurations
          echo "## Docker Compose Security Analysis" > infra-security-report.md
          echo "" >> infra-security-report.md
          
          # Check for privileged containers
          if grep -r "privileged.*true" docker-compose*.yml; then
            echo "❌ CRITICAL: Privileged containers found!" >> infra-security-report.md
          else
            echo "✅ No privileged containers found" >> infra-security-report.md
          fi
          
          # Check for exposed ports
          echo "" >> infra-security-report.md
          echo "### Exposed Ports Analysis:" >> infra-security-report.md
          grep -r "ports:" docker-compose*.yml >> infra-security-report.md || echo "No exposed ports found"
          
          # Check for volume mounts
          echo "" >> infra-security-report.md
          echo "### Volume Mounts:" >> infra-security-report.md
          grep -r "volumes:" docker-compose*.yml >> infra-security-report.md || echo "No volumes found"

      - name: 🔍 Dockerfile security scan
        run: |
          echo "🔍 Analyzing Dockerfiles for security issues..."
          
          for dockerfile in $(find . -name "Dockerfile*" -not -path "./node_modules/*"); do
            echo "## Analyzing $dockerfile" >> dockerfile-security.md
            echo "" >> dockerfile-security.md
            
            # Check for root user
            if grep -q "USER root\|^FROM.*ubuntu.*$\|^FROM.*debian.*$" "$dockerfile"; then
              if ! grep -q "USER.*[^root]" "$dockerfile"; then
                echo "⚠️ WARNING: Container may run as root user" >> dockerfile-security.md
              fi
            fi
            
            # Check for latest tags
            if grep -q ":latest\|FROM.*[^:]$" "$dockerfile"; then
              echo "⚠️ WARNING: Using 'latest' or unversioned base images" >> dockerfile-security.md
            fi
            
            # Check for package updates
            if grep -q "apt-get update" "$dockerfile"; then
              if ! grep -q "apt-get upgrade" "$dockerfile"; then
                echo "ℹ️ INFO: Consider adding 'apt-get upgrade' after 'apt-get update'" >> dockerfile-security.md
              fi
            fi
            
            echo "" >> dockerfile-security.md
          done

      - name: 🔍 Environment variables security check
        run: |
          echo "🔍 Checking for exposed secrets..."
          
          # Check for potential secrets in environment variables
          find . -name "*.yml" -o -name "*.yaml" -o -name "*.env*" -not -path "./node_modules/*" | \
          xargs grep -l -E "(password|secret|key|token)" | \
          while read file; do
            echo "📁 Checking $file for secrets..."
            if grep -E "(password|secret|key|token).*=" "$file"; then
              echo "⚠️ Potential secrets found in $file"
            fi
          done

      - name: 📊 Upload infrastructure security reports
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security-reports
          path: |
            infra-security-report.md
            dockerfile-security.md
          retention-days: 30

  # =====================================
  # Production Security Scan
  # =====================================
  production-security:
    name: 🌍 Production Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🔍 SSL/TLS configuration check
        run: |
          if [ -n "${{ vars.PRODUCTION_DOMAIN }}" ]; then
            echo "🔍 Checking SSL/TLS configuration for ${{ vars.PRODUCTION_DOMAIN }}"
            
            # Check SSL certificate
            echo "## SSL Certificate Analysis" > ssl-report.md
            echo "Domain: ${{ vars.PRODUCTION_DOMAIN }}" >> ssl-report.md
            echo "Scan Date: $(date)" >> ssl-report.md
            echo "" >> ssl-report.md
            
            # Use SSL Labs API (rate limited)
            curl -s "https://api.ssllabs.com/api/v3/analyze?host=${{ vars.PRODUCTION_DOMAIN }}&publish=off&all=done" | \
              jq -r '.status, .grade' >> ssl-report.md || echo "SSL scan unavailable"
          else
            echo "⚠️ No production domain configured for SSL scanning"
          fi

      - name: 🔍 Web application security scan
        run: |
          if [ -n "${{ vars.PRODUCTION_DOMAIN }}" ]; then
            echo "🔍 Basic security headers check..."
            
            # Check security headers
            echo "## Security Headers Analysis" > security-headers-report.md
            echo "Domain: https://${{ vars.PRODUCTION_DOMAIN }}" >> security-headers-report.md
            echo "Scan Date: $(date)" >> security-headers-report.md
            echo "" >> security-headers-report.md
            
            # Check for security headers
            headers=$(curl -s -I https://${{ vars.PRODUCTION_DOMAIN }} || echo "Connection failed")
            
            echo "### Response Headers:" >> security-headers-report.md
            echo "\`\`\`" >> security-headers-report.md
            echo "$headers" >> security-headers-report.md
            echo "\`\`\`" >> security-headers-report.md
            echo "" >> security-headers-report.md
            
            # Analyze security headers
            echo "### Security Headers Analysis:" >> security-headers-report.md
            
            if echo "$headers" | grep -qi "x-frame-options"; then
              echo "✅ X-Frame-Options header present" >> security-headers-report.md
            else
              echo "❌ X-Frame-Options header missing" >> security-headers-report.md
            fi
            
            if echo "$headers" | grep -qi "x-content-type-options"; then
              echo "✅ X-Content-Type-Options header present" >> security-headers-report.md
            else
              echo "❌ X-Content-Type-Options header missing" >> security-headers-report.md
            fi
            
            if echo "$headers" | grep -qi "strict-transport-security"; then
              echo "✅ HSTS header present" >> security-headers-report.md
            else
              echo "❌ HSTS header missing" >> security-headers-report.md
            fi
          else
            echo "⚠️ No production domain configured for security scanning"
          fi

      - name: 📊 Upload production security reports
        uses: actions/upload-artifact@v4
        with:
          name: production-security-reports
          path: |
            ssl-report.md
            security-headers-report.md
          retention-days: 30

  # =====================================
  # Security Report Compilation
  # =====================================
  compile-report:
    name: 📋 Compile Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-security, infrastructure-security, production-security]
    if: always()

    steps:
      - name: 📥 Download all reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: 📋 Compile comprehensive security report
        run: |
          echo "# 🛡️ Gyvagaudziaispastai Security Report" > comprehensive-security-report.md
          echo "Generated: $(date)" >> comprehensive-security-report.md
          echo "Workflow Run: ${{ github.run_number }}" >> comprehensive-security-report.md
          echo "" >> comprehensive-security-report.md
          
          echo "## 📊 Scan Results Summary" >> comprehensive-security-report.md
          echo "" >> comprehensive-security-report.md
          echo "| Component | Status |" >> comprehensive-security-report.md
          echo "|-----------|--------|" >> comprehensive-security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> comprehensive-security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> comprehensive-security-report.md
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> comprehensive-security-report.md
          echo "| Infrastructure | ${{ needs.infrastructure-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> comprehensive-security-report.md
          echo "| Production Scan | ${{ needs.production-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> comprehensive-security-report.md
          echo "" >> comprehensive-security-report.md
          
          # Append all individual reports
          find security-reports -name "*.md" -exec cat {} \; >> comprehensive-security-report.md 2>/dev/null || echo "No markdown reports found"

      - name: 📊 Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: comprehensive-security-report.md
          retention-days: 90

      - name: 📧 Email security report
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '🛡️ Weekly Security Report - Gyvagaudziaispastai'
          body: file://comprehensive-security-report.md
          from: 'security@gyvagaudziaispastai.com'
          to: '${{ secrets.SECURITY_EMAIL }}'

  # =====================================
  # Security Notifications
  # =====================================
  notify:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-security, infrastructure-security, production-security]
    if: always()

    steps:
      - name: 📱 Critical security alert
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          custom_payload: |
            {
              "text": "🚨 Critical Security Alert - Gyvagaudziaispastai",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "⚠️ Security Scan Failed",
                      "value": "One or more security scans have detected issues that require immediate attention.",
                      "short": false
                    },
                    {
                      "title": "Dependency Scan",
                      "value": "${{ needs.dependency-scan.result }}",
                      "short": true
                    },
                    {
                      "title": "Container Scan",
                      "value": "${{ needs.container-scan.result }}",
                      "short": true
                    },
                    {
                      "title": "Code Security",
                      "value": "${{ needs.code-security.result }}",
                      "short": true
                    },
                    {
                      "title": "Infrastructure",
                      "value": "${{ needs.infrastructure-security.result }}",
                      "short": true
                    },
                    {
                      "title": "Action Required",
                      "value": "Please review the security reports and address any critical vulnerabilities immediately.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

      - name: 📱 Weekly security summary
        if: github.event.schedule == '0 3 * * 0'  # Only on scheduled runs
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          custom_payload: |
            {
              "text": "🛡️ Weekly Security Report - Gyvagaudziaispastai",
              "attachments": [
                {
                  "color": "${{ contains(needs.*.result, 'failure') && 'warning' || 'good' }}",
                  "fields": [
                    {
                      "title": "Scan Summary",
                      "value": "${{ contains(needs.*.result, 'failure') && '⚠️ Issues Found' || '✅ All Clear' }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}